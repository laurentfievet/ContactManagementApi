// <auto-generated />
using ContactManagement.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContactManagement.DAL.Migrations
{
    [DbContext(typeof(ContactDBContext))]
    partial class ContactDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContactManagement.DAL.Entities.Adress", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("StreetNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("ContactManagement.DAL.Entities.Contact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AdressId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("GSMNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.Property<bool>("IsFreelance")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TVANumber")
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("AdressId");

                    b.ToTable("Contact");
                });

            modelBuilder.Entity("ContactManagement.DAL.Entities.ContactEnterprise", b =>
                {
                    b.Property<long>("ContactId")
                        .HasColumnType("bigint");

                    b.Property<long>("EnterpriseId")
                        .HasColumnType("bigint");

                    b.HasKey("ContactId", "EnterpriseId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("ContactEnterprise");
                });

            modelBuilder.Entity("ContactManagement.DAL.Entities.Enterprise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("TVANumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.ToTable("Enterprise");
                });

            modelBuilder.Entity("ContactManagement.DAL.Entities.EnterpriseAdress", b =>
                {
                    b.Property<long>("AdressId")
                        .HasColumnType("bigint");

                    b.Property<long>("EnterpriseId")
                        .HasColumnType("bigint");

                    b.Property<bool>("HeadOffice")
                        .HasColumnType("bit");

                    b.HasKey("AdressId", "EnterpriseId");

                    b.HasIndex("EnterpriseId");

                    b.ToTable("EnterpriseAdress");
                });

            modelBuilder.Entity("ContactManagement.DAL.Entities.Contact", b =>
                {
                    b.HasOne("ContactManagement.DAL.Entities.Adress", "Adress")
                        .WithMany()
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactManagement.DAL.Entities.ContactEnterprise", b =>
                {
                    b.HasOne("ContactManagement.DAL.Entities.Contact", "Contact")
                        .WithMany("ContactEnterprise")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactManagement.DAL.Entities.Enterprise", "Enterprise")
                        .WithMany("ContactEnterprise")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContactManagement.DAL.Entities.EnterpriseAdress", b =>
                {
                    b.HasOne("ContactManagement.DAL.Entities.Adress", "Adress")
                        .WithMany("EnterpriseAdress")
                        .HasForeignKey("AdressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ContactManagement.DAL.Entities.Enterprise", "Enterprise")
                        .WithMany("EnterpriseAdress")
                        .HasForeignKey("EnterpriseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
